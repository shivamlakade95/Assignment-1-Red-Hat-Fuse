<application xmlns="http://wadl.dev.java.net/2009/02" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:prefix1="http://org.jboss.fuse.quickstarts/"><grammars><xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://org.jboss.fuse.quickstarts/" attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://org.jboss.fuse.quickstarts/" version="1.0">
    <xs:element name="Customer" type="tns:customer"/>
    <xs:element name="Order" type="tns:order"/>
    <xs:element name="Product" type="tns:product"/>
    <xs:complexType name="product">
        <xs:sequence>
            <xs:element minOccurs="0" name="description" type="xs:string"/>
            <xs:element name="id" type="xs:long"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="customer">
        <xs:sequence>
            <xs:element name="id" type="xs:long"/>
            <xs:element minOccurs="0" name="name" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="order">
        <xs:sequence>
            <xs:element minOccurs="0" name="description" type="xs:string"/>
            <xs:element name="id" type="xs:long"/>
        </xs:sequence>
    </xs:complexType>
</xs:schema>
</grammars><resources base="/"><resource path="/customerservice/"><doc>This Java class with be hosted in the URI path defined by the @Path annotation. @Path annotations on the methods
 of this class always refer to a path relative to the path defined at the class level.
 &lt;p/&gt;
 For example, with &apos;http://localhost:8181/cxf&apos; as the default CXF servlet path and &apos;/crm&apos; as the JAX-RS server path,
 this class will be hosted in &apos;http://localhost:8181/cxf/crm/customerservice&apos;.  An @Path(&quot;/customers&quot;) annotation on
 one of the methods would result in &apos;http://localhost:8181/cxf/crm/customerservice/customers&apos;.</doc><resource path="customers/"><method name="POST"><doc>Using HTTP POST, we can add a new customer to the system by uploading the XML representation for the customer.
 This operation will be mapped to the method below and the XML representation will get unmarshaled into a real
 Customer object.
 &lt;p/&gt;
 After the method has added the customer to the local data map, it will use the Response class to build the HTTP reponse,
 sending back the inserted customer object together with a HTTP Status 200/OK.  This allows us to send back the
 new id for the customer object to the client application along with any other data that might have been updated in
 the process.
 &lt;p/&gt;
 Note how this method is using the same @Path value as our previous method - the HTTP method used will determine which
 method is being invoked.</doc><request><representation mediaType="application/xml" element="prefix1:Customer"></representation><representation mediaType="application/json"></representation></request><response><representation mediaType="*/*"></representation></response></method><method name="PUT"><doc>Using HTTP PUT, we can can upload the XML representation of a customer object.  This operation will be mapped
 to the method below and the XML representation will get unmarshaled into a real Customer object using JAXB.
 &lt;p/&gt;
 The method itself just updates the customer object in our local data map and afterwards uses the Reponse class to
 build the appropriate HTTP response: either OK if the update succeeded (translates to HTTP Status 200/OK) or not
 modified if the method failed to update a customer object (translates to HTTP Status 304/Not Modified).
 &lt;p/&gt;
 Note how this method is using the same @Path value as our next method - the HTTP method used will determine which
 method is being invoked.</doc><request><representation mediaType="application/xml" element="prefix1:Customer"></representation><representation mediaType="application/json"></representation></request><response><representation mediaType="*/*"></representation></response></method></resource><resource path="customers/{id}/"><param name="id" style="template" type="xs:string"></param><method name="DELETE"><doc>This method is mapped to an HTTP DELETE of &apos;http://localhost:8181/cxf/crm/customerservice/customers/{id}&apos;.  The value for
 {id} will be passed to this message as a parameter, using the @PathParam annotation.
 &lt;p/&gt;
 The method uses the Response class to create the HTTP response: either HTTP Status 200/OK if the customer object was
 successfully removed from the local data map or a HTTP Status 304/Not Modified if it failed to remove the object.</doc><request></request><response><representation mediaType="*/*"></representation></response></method><method name="GET"><doc>This method is mapped to an HTTP GET of &apos;http://localhost:8181/cxf/crm/customerservice/customers/{id}&apos;.  The value for
 {id} will be passed to this message as a parameter, using the @PathParam annotation.
 &lt;p/&gt;
 The method returns a Customer object - for creating the HTTP response, this object is marshaled into XML using JAXB.
 &lt;p/&gt;
 For example: surfing to &apos;http://localhost:8181/cxf/crm/customerservice/customers/123&apos; will show you the information of
 customer 123 in XML format.</doc><request></request><response><representation mediaType="application/xml" element="prefix1:Customer"></representation></response></method></resource><resource path="/orders/{orderId}/"><param name="orderId" style="template" type="xs:string"></param><method name="GET"><doc>This method is mapped to an HTTP GET of &apos;/&apos;, relative to the URL that point to this Order resource itself.
 &lt;p/&gt;
 The method returns the Order object itself - for creating the HTTP response, this object is marshaled into XML using
 JAXB.
 &lt;p/&gt;
 For example: if surfing to &apos;http://localhost:8181/cxf/crm/customerservice/orders/223&apos; will show you the information of
 order 223 in XML format (as defined in CustomerService&apos;s getOrder() method), you can access product 323 in that order by
 accessing &apos;http://localhost:8181/cxf/crm/customerservice/orders/223/products/323&apos;</doc><response><representation mediaType="application/xml" element="prefix1:Order"></representation></response></method><resource path="/products/{productId}/"><param name="productId" style="template" type="xs:int"></param><method name="GET"><doc>This method is mapped to an HTTP GET of &apos;products/{productId}&apos;, relative to the URL that point to this Order resource
 itself.
 The value for {productId} will be passed to this message as a parameter, using the @PathParam annotation.
 &lt;p/&gt;
 The method returns an Product object - for creating the HTTP response, this object is marshaled into XML using JAXB.
 &lt;p/&gt;
 For example: accessing &apos;http://localhost:8181/cxf/crm/customerservice/orders/223/products/323&apos; will first trigger the
 CustomerService&apos;s getOrder() method to return the Order instance for order 223 and afterwards, it will use the remaining
 part of the URI (&apos;products/323&apos;) to map to this method and return the product details for product 323 in this order.</doc><request></request><response><representation mediaType="application/xml" element="prefix1:Product"></representation></response></method></resource></resource></resource></resources></application>