#
#Thu Jul 22 00:29:24 IST 2021
org.jboss.fuse.quickstarts.cxf.rest.Product=The Product class is just a plain old java object, with a few properties and getters and setters.\n <p/>\n By adding the @XmlRootElement annotation, we make it possible for JAXB to unmarshal this object into a XML document and\n to marshal it back from the same XML document.\n <p/>\n The XML representation of a Product will look like this\:\n <Product>\n <id>10010</id>\n <description>Armadillo</description>\n </Product>
org.jboss.fuse.quickstarts.cxf.rest.Product.getDescription=
org.jboss.fuse.quickstarts.cxf.rest.Customer.getName=
org.jboss.fuse.quickstarts.cxf.rest.CustomerService.updateCustomer=Using HTTP PUT, we can can upload the XML representation of a customer object.  This operation will be mapped\n to the method below and the XML representation will get unmarshaled into a real Customer object using JAXB.\n <p/>\n The method itself just updates the customer object in our local data map and afterwards uses the Reponse class to\n build the appropriate HTTP response\: either OK if the update succeeded (translates to HTTP Status 200/OK) or not\n modified if the method failed to update a customer object (translates to HTTP Status 304/Not Modified).\n <p/>\n Note how this method is using the same @Path value as our next method - the HTTP method used will determine which\n method is being invoked.
org.jboss.fuse.quickstarts.cxf.rest.Order.getProduct=This method is mapped to an HTTP GET of 'products/{productId}', relative to the URL that point to this Order resource\n itself.\n The value for {productId} will be passed to this message as a parameter, using the @PathParam annotation.\n <p/>\n The method returns an Product object - for creating the HTTP response, this object is marshaled into XML using JAXB.\n <p/>\n For example\: accessing 'http\://localhost\:8181/cxf/crm/customerservice/orders/223/products/323' will first trigger the\n CustomerService's getOrder() method to return the Order instance for order 223 and afterwards, it will use the remaining\n part of the URI ('products/323') to map to this method and return the product details for product 323 in this order.
org.jboss.fuse.quickstarts.cxf.rest.CustomerService.deleteCustomer=This method is mapped to an HTTP DELETE of 'http\://localhost\:8181/cxf/crm/customerservice/customers/{id}'.  The value for\n {id} will be passed to this message as a parameter, using the @PathParam annotation.\n <p/>\n The method uses the Response class to create the HTTP response\: either HTTP Status 200/OK if the customer object was\n successfully removed from the local data map or a HTTP Status 304/Not Modified if it failed to remove the object.
org.jboss.fuse.quickstarts.cxf.rest.Customer.setId=
org.jboss.fuse.quickstarts.cxf.rest.CustomerService.getOrder=This method is mapped to an HTTP GET of 'http\://localhost\:8181/cxf/crm/customerservice/orders/{id}'.  The value for\n {id} will be passed to this message as a parameter, using the @PathParam annotation.\n <p/>\n The method returns an Order object - the class for that object includes a few more JAX-RS annotations, allowing it to\n display one of these two outputs, depending on the actual URI path being used\:\n - display the order information itself in XML format\n - display details about a product in the order in XML format in a path relative to the URI defined here
org.jboss.fuse.quickstarts.cxf.rest.Product.getId=
org.jboss.fuse.quickstarts.cxf.rest.Order.getId=
org.jboss.fuse.quickstarts.cxf.rest.Order.getDescription=
org.jboss.fuse.quickstarts.cxf.rest.CustomerService.setMessageContext=
org.jboss.fuse.quickstarts.cxf.rest.Order.getThisOrder=This method is mapped to an HTTP GET of '/', relative to the URL that point to this Order resource itself.\n <p/>\n The method returns the Order object itself - for creating the HTTP response, this object is marshaled into XML using\n JAXB.\n <p/>\n For example\: if surfing to 'http\://localhost\:8181/cxf/crm/customerservice/orders/223' will show you the information of\n order 223 in XML format (as defined in CustomerService's getOrder() method), you can access product 323 in that order by\n accessing 'http\://localhost\:8181/cxf/crm/customerservice/orders/223/products/323'
org.jboss.fuse.quickstarts.cxf.rest.CustomerService.addCustomer=Using HTTP POST, we can add a new customer to the system by uploading the XML representation for the customer.\n This operation will be mapped to the method below and the XML representation will get unmarshaled into a real\n Customer object.\n <p/>\n After the method has added the customer to the local data map, it will use the Response class to build the HTTP reponse,\n sending back the inserted customer object together with a HTTP Status 200/OK.  This allows us to send back the\n new id for the customer object to the client application along with any other data that might have been updated in\n the process.\n <p/>\n Note how this method is using the same @Path value as our previous method - the HTTP method used will determine which\n method is being invoked.
org.jboss.fuse.quickstarts.cxf.rest.Product.setDescription=
org.jboss.fuse.quickstarts.cxf.rest.Product.setId=
org.jboss.fuse.quickstarts.cxf.rest.CustomerService.getCustomer=This method is mapped to an HTTP GET of 'http\://localhost\:8181/cxf/crm/customerservice/customers/{id}'.  The value for\n {id} will be passed to this message as a parameter, using the @PathParam annotation.\n <p/>\n The method returns a Customer object - for creating the HTTP response, this object is marshaled into XML using JAXB.\n <p/>\n For example\: surfing to 'http\://localhost\:8181/cxf/crm/customerservice/customers/123' will show you the information of\n customer 123 in XML format.
org.jboss.fuse.quickstarts.cxf.rest.Order.setId=
org.jboss.fuse.quickstarts.cxf.rest.Customer=The Customer class is just a plain old java object, with a few properties and getters and setters.\n <p/>\n By adding the @XmlRootElement annotation, we make it possible for JAXB to unmarshal this object into a XML document and\n to marshal it back from the same XML document.\n <p/>\n The XML representation of a Customer will look like this\:\n <Customer>\n <id>123</id>\n <name>National Aquarium</name>\n </Customer>
org.jboss.fuse.quickstarts.cxf.rest.Customer.getId=
org.jboss.fuse.quickstarts.cxf.rest.CustomerService=This Java class with be hosted in the URI path defined by the @Path annotation. @Path annotations on the methods\n of this class always refer to a path relative to the path defined at the class level.\n <p/>\n For example, with 'http\://localhost\:8181/cxf' as the default CXF servlet path and '/crm' as the JAX-RS server path,\n this class will be hosted in 'http\://localhost\:8181/cxf/crm/customerservice'.  An @Path("/customers") annotation on\n one of the methods would result in 'http\://localhost\:8181/cxf/crm/customerservice/customers'.
org.jboss.fuse.quickstarts.cxf.rest.Customer.setName=
org.jboss.fuse.quickstarts.cxf.rest.Order=The Order class is not only a plain old java object, with a few properties and getters and setters, but it also defines\n a sub-resource for the Order returned by CustomerService.\n <p/>\n By adding the @XmlRootElement annotation, we make it possible for JAXB to unmarshal this object into a XML document and\n to marshal it back from the same XML document.\n <p/>\n The XML representation of an Order will look like this\:\n <Order>\n <id>223</id>\n <description>Order 223</description>\n </Order>
org.jboss.fuse.quickstarts.cxf.rest.Order.setDescription=
